###字符串的方法
```
>>> dir(str)  
.count
.startswith
.endswith
.find
.format
.index
.isdigit
.islower
.isupper
.join
.ljust
.lower
.lstrip
.replace
.rjust
.split
.strip
.upper
```
##字符串方法
#### s.count(str): 
**count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。**
**S.count(sub[, start[, end]]) -> int**
* sub -- 搜索的子字符串
* start -- 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。
* end -- 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。
```
In [1]: s = "test.51reboot"                                                    

In [2]: s.count('o')     #字符串中'o'的数量2个                                                 
Out[2]: 2

In [3]: s.count('o', 0, 11)    #字符串中从第0个位置到第11个位置中'o'的数量1个                                                 
Out[3]: 1

```
#### s.startswith(str)：
**startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 start 和 end 指定值，则在指定范围内检查。**
**S.startswith(prefix[, start[, end]]) -> bool**
* str -- 检测的字符串。
* start -- 可选参数用于设置字符串检测的起始位置。
* end -- 可选参数用于设置字符串检测的结束位置。
```
In [1]: s = "test.51reboot"                                                   

In [2]: s.startswith('test')    #字符串是否以'test'开头   是                                              
Out[2]: True

In [3]: s.startswith('51')   #字符串是否以'51'开头    否                                             
Out[3]: False

In [4]: s.startswith('51',5,10)           #字符串从第5个位置到第10个位置，是否以'51'开头  是                                     
Out[4]: True
```

#### s.endswith(str):
**endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。**
**S.endswith(suffix[, start[, end]]) -> bool**
* suffix -- 该参数可以是一个字符串或者是一个元素。
* start -- 字符串中的开始位置。
* end -- 字符中结束位置。
```
In [1: s = "test.51reboot"                                                   

In [2]: s.endswith('boot')       #字符串是否以'boot'结尾   是                                          
Out[2]: True

In [3]: s.endswith('st', 0, 4)    #字符串从第0个位置到第4个位置，是否以'st'结尾   是                                            
Out[3]: True

In [4]: s.endswith('st', 0, 3)                                                
Out[4]: False
```

#### s.find(str)：
**find() 方法检测字符串中是否包含子字符串 str ，如果指定 start（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。**
**S.find(sub[, start[, end]]) -> int**
* sub -- 指定检索的子字符串。
* start -- 可选参数，开始索引，默认为0。（可单独指定）
* end -- 可选参数，结束索引，默认为字符串的长度。（不能单独指定）
```
In [1]: s = "test.51reboot"                                                   

In [2]: s.find('51')   # 从下标0开始，查找在字符串里第一个出现的子串，返回结果：5                                                    
Out[2]: 5

In [3]: s.find('st', 1, 6)    # 从下标1开始，查找在字符串里第一个出现的子串：返回结果2                                               
Out[3]: 2

In [4]: s.find('o', 1)   # 从下标1开始，查找在字符串里第一个出现的子串：返回结果10                                                      
Out[4]: 10

In [5]: s.find('a')     # 查找不到返回-1                                                       
Out[5]: -1
```

####s.format(str)：
**格式化字符串**
**S.format(*args, **kwargs) -> str**
```
# 1、通过位置
In [1]: 'a1={} a2={} a3={}'.format('first', 'second', 'third')   #{}不带参数              
Out[1]: 'a1=first a2=second a3=third'

In [2]: 'a1={1} a2={0} a3={2}'.format('first', 'second', 'third')    #{}带位置参数的         
Out[2]: 'a1=second a2=first a3=third'
#注意：如果{}要带参数，可以将format看成一个函数输入的值是函数的参数，这些输入的值可以看成一个元组，{0} == tuple[0] 同样他们也不能越界

# 2、通过关键字参数
In [3]: 'my name is {name}, age is {age}'.format(name='jack', age=20)         
Out[3]: 'my name is jack, age is 20'

In [4]: 'my name is {name}, age is {age}'.format(age=20, name='jack')    #同样和位置无关     
Out[4]: 'my name is jack, age is 20'

# 3、通过对象属性
In [5]: class Person: 
    ...:     def __init__(self, name, age): 
    ...:         self.name = name 
    ...:         self.age = age 
    ...:                                                                       

In [6]: p = Person('Tom',18)                                                  

In [7]: 'name={p.name} age={p.age}'.format(p=p)                               
Out[7]: 'name=Tom age=18'

# 4、通过下标
In [8]: s1 = [1, 2, 3, 4]                                                     

In [9]: s2 = ['test1', 'test2', 'test3']                                      

In [10]: '{0[1]} {0[2]} {1[2]} {1[0]}'.format(s1, s2)                          
Out[10]: '2 3 test3 test1'

#5、格式化输出(重点)
 格式限定符
 语法是{}中带:号）
 {:对齐方式  填充}
 填充与对齐
 填充常跟对齐一起使用
 ^、<、>分别是居中、左对齐、右对齐，后面带宽度
 :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充
 
 #5.1、填充与对齐
In [11]: '输出左对齐定长为10位: [{:<10}]'.format('test')     #默认填充空格的                  
Out[11]: '输出左对齐定长为10位: [test      ]'

In [12]: '输出右对齐定长为10位: [{:>10}]'.format('test')     #默认填充空格的                  
Out[12]: '输出右对齐定长为10位: [      test]'

In [13]: '输出右对齐定长为10位: [{:0>10}]'.format('test')     #修改填充，填充只能是一个ASCII字符                 
Out[13]: '输出右对齐定长为10位: [000000test]'

In [14]: '输出居中对齐定长为10位: [{:x^10}]'.format('test')     #修改填充，填充只能是一个ASCII字符               
Out[14]: '输出居中对齐定长为10位: [xxxtestxxx]'

#5.2、浮点小数输出
In [15]: '{:.2f}'.format(3.1415926)   #通常都是配合 f 使用,其中.2表示长度为2的精度，f表示float类型                                          
Out[15]: '3.14'

In [16]: '{:,}'.format(31415926)    #使用逗号金额分割符                                           
Out[16]: '31,415,926'

#5.3、进制及其他显示
b : 二进制
d ：十进制
o ：八进制
x ：十六进制
!s ：将对象格式化转换成字符串
!a ：将对象格式化转换成ASCII
!r ：将对象格式化转换成repr
In [17]: '二进制: {:b}'.format(10)                                          
Out[17]: '二进制: 1010'

In [18]: '十进制: {:d}'.format(10)                                             
Out[18]: '十进制: 10'

In [19]: '八进制: {:o}'.format(10)                                             
Out[19]: '八进制: 12'

In [20]: '十六进制: {:x}'.format(10)                                           
Out[20]: '十六进制: a'

In [21]: '{!s}'.format(10)  #将对象格式化转换成字符串                                                       
Out[21]: '10'

In [22]: '{!a}'.format('96')     #格式化转换                                              
Out[22]: "'96'"

In [23]: '{!r}'.format('96')      #格式化转换                                             
Out[23]: "'96'"
```
#### s.index(str)：
**index() 方法从字符串中找出某个子字符串第一个匹配项的索引位置，该方法与 find() 方法一样，只不过如果子字符串不在字符串中会报一个异常。**
**S.index(sub[, start[, end]]) -> int**
* sub -- 指定检索的子字符串
* start-- 可选参数，开始索引，默认为0。（可单独指定）
* end-- 可选参数，结束索引，默认为字符串的长度。（不能单独指定）
```
In [24]: s = "test.51reboot"                                                  

In [25]: s.index('re')                                                        
Out[25]: 7

In [26]: s.index('re', 6)                                                     
Out[26]: 7

In [27]: s.index('re', 10)                                                    
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-123-220e512296c4> in <module>
----> 1 s.index('re', 10)

ValueError: substring not found

In [28]: s.index('re', 0, 10)                                                 
Out[28]: 7
```

#### s.join(str)
**join()方法用于将序列中的元素以指定的字符连接生成一个新的字符串**
**S.join(iterable) -> str**
* iterable   要连接的元素序列
```
#对字符串操作，也可对序列、元组、字典进行操作
In [41]: s = "test 51reboot"                                                  
In [42]: '-'.join(s)                                                          
Out[42]: 't-e-s-t- -5-1-r-e-b-o-o-t'

#对目录进行操作
In [43]: import os                                                            
In [44]: os.path.join('/hello/','good/date', 'study')                         
Out[44]: '/hello/good/date/study'
```

#### s.isdigit(str)：
**isdigit() 方法检测字符串是否只由数字组成。**
**S.isdigit() -> bool**
```
In [29]: s1 = "test"                                                          

In [30]: s1.isdigit()                                                         
Out[30]: False

In [31]: s2 = "1234"                                                          

In [32]: s2.isdigit()                                                         
Out[32]: True
```

#### s.islower(str)
**islower() 方法检测字符串是否由小写字母组成。**
**S.islower() -> bool**
```
In [33]: s = "Test"                                                           

In [34]: s.islower()                                                          
Out[34]: False

In [35]: s1 = "test"                                                          

In [36]: s1.islower()                                                         
Out[36]: True
```
#### s.isupper(str)
**isupper() 方法检测字符串中所有的字母是否都为大写。**
**S.isupper() -> bool**
```
In [37]: s = "Test"                                                           

In [38]: s.isupper()                                                          
Out[38]: False

In [39]: s1 = "TEST"                                                          

In [40]: s1.isupper()                                                         
Out[40]: True
```
####s.lower(str)
**S.lower() -> str**
**lower() 方法转换字符串中所有大写字符为小写。**
```
In [53]: s = "TEST"                                                           

In [54]: s.lower()                                                            
Out[54]: 'test'
```
####s.upper(str)
**upper() 方法将字符串中的小写字母转为大写字母。**
**S.upper() -> str**
```
In [71]: s = "Test"                                                           

In [72]: s.upper()                                                            
Out[72]: 'TEST'
```
####s.ljust(str)
**S.ljust(width[, fillchar]) -> str**
**输出width个字符，S左对齐，不足部分用fillchar填充，默认的为空格。**
```
In [45]: s = "test 51reboot"                                                  

In [46]: s.ljust(20)                                                          
Out[46]: 'test 51reboot       '

In [47]: s.ljust(20, '0')                                                     
Out[47]: 'test 51reboot0000000'

In [48]: s.ljust(20, 'x')                                                     
Out[48]: 'test 51rebootxxxxxxx'
```
####s.rjust(str)
**S.rjust(width[, fillchar]) -> str**
**输出width个字符，S右对齐，不足部分用fillchar填充，默认的为空格。**
```
In [49]: s = "test 51reboot"                                                  

In [50]: s.rjust(20)                                                          
Out[50]: '       test 51reboot'

In [51]: s.rjust(20, 'x')                                                     
Out[51]: 'xxxxxxxtest 51reboot'

In [52]: s.rjust(20, '0')                                                     
Out[52]: '0000000test 51reboot'
```
####s.lstrip(str)
**lstrip() 方法用于截掉字符串左边的空格或指定字符。**
**S.lstrip([chars]) -> str**
```
In [55]: s = "     Test 51reboot    "                                         

In [55]: s.lstrip()                                                           
Out[55]: 'Test 51reboot    '

In [56]: s1 = "22222Test 51reboot2222"                                        

In [57]: s1.lstrip('2')                                                       
Out[57]: 'Test 51reboot2222'
```
####s.replace(str)
**replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数count，则替换不超过count次。**
**S.replace(old, new[, count]) -> str**
* old -- 将被替换的子字符串。
* new -- 新字符串，用于替换old子字符串。
* count -- 可选字符串, 替换不超过count次
```
In [58]: s = "test 51reboot test test"                                        

In [59]: s.replace("test","hello")    #将"test"替换为"hello"                                        
Out[59]: 'hello 51reboot hello hello'

In [60]: s.replace("test","hello",2)  #将"test"替换为"hello"，替换不超过2次，所以只替换了前面2个                                           
Out[60]: 'hello 51reboot hello test'
```
####s.split(str)
**split() 通过指定分隔符对字符串进行切片，返回s中的单词列表，使用sep作为分隔符字符串。如果给定maxsplit，则最多为maxsplit分割完成。如果未指定SEP或SEP为“无”，则任何空白字符串是分隔符，空字符串是从结果中删除。**
**S.split(sep=None, maxsplit=-1) -> list of strings**
```
In [61]: s = '1,2,3, test 51reboot'                                           

In [62]: s.split()       # 以空格为分隔符                                                      
Out[62]: ['1,2,3,', 'test', '51reboot']

In [63]: s.split(',')     # 以','为分隔符                                                      
Out[63]: ['1', '2', '3', ' test 51reboot']

In [64]: s.split(',',1)   # 以','为分隔符，分割一次                                                    
Out[64]: ['1', '2,3, test 51reboot']

In [65]: s.split(maxsplit=1)    # 以空格为分隔符,分割一次                                               
Out[65]: ['1,2,3,', 'test 51reboot']

In [66]: s.split(',',maxsplit=2)[1]    ## 以','为分隔符，分割2次，取序列为1的值                                        
Out[66]: '2'
```
####s.strip(str)
**strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。**
**S.strip([chars]) -> str**
```
In [67]: s = "000test 000 51reboot000"                                     

In [68]: s.strip('0')   # 去除首尾字符 0                                                          
Out[68]: 'test 000 51reboot'

In [69]: s1 = "123test321"     #只要头尾包含有指定字符序列中的字符'12'就删除                                               

In [70]: s.strip('12')                                                        
Out[70]: '3abcrunoob3'
```

